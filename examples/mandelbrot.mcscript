static size = 128;
static yCenter = 0;
static xCenter = 0;

static border = 1.0;
# choose step so that xMin and yMin are equal to - border;
static step = (2.0 * border) / (size - 1);
static maxIterations = 15;

static stringArmorStand = "summon armor_stand ~ ~ ~ {'Tags':['$', 'mandelbrot'],Marker:1b}";

fun start() {
    execute(stringFormat(stringArmorStand, "mandelbrot_master"));
}

struct Complex {
    real: Fixed;
    imag: Fixed;

    fun add(self: Complex, other: Complex) -> Complex {
        return Complex(self.real + other.real, self.imag + other.imag);
    }

    fun square(self: Complex) -> Complex {
        return Complex(self.real * self.real - self.imag * self.imag, 2.0 * self.real * self.imag);
    }

    fun absSquared(self: Complex) -> Fixed {
        return self.real * self.real + self.imag * self.imag;
    }
}


struct MandelbrotManager {
    currentX: Fixed;
    currentY: Fixed;
    workerCount: Number;
    step: Number;

    fun tick(self: MandelbrotManager) {
        if (self.workerCount < size) {
            run for @e[tag=mandelbrot_master] at @s {
                execute("tp @s ~ ~ ~1");
                execute(stringFormat(stringArmorStand, "mandelbrot_worker"));
                ++self.workerCount;
            }
        } else if (self.step < size) {
            self.currentX = -step / 2 * (size - 1) + xCenter;
            run for @e[tag=mandelbrot_worker, sort=nearest] at @s {
                inMandelbrot = mandelbrot(self.currentX, self.currentY);
                
                if (inMandelbrot) {
                    setBlock(blocks.sea_lantern, 0, -1, 0);
                } else {
                    setBlock(blocks.black_concrete, 0, -1, 0);
                }
                
                execute("tp @s ~1 ~ ~");
                self.currentX = self.currentX + step;
            }
            self.currentY = self.currentY + step;
            ++self.step;
        } else {
            run for @a actionbar("Done!");
            execute("kill @e[tag=mandelbrot]");
        }
    }
}



fun mandelbrot(x: Fixed, y: Fixed) -> Boolean {
    c = Complex(x, y);
    z = Complex(0.0, 0.0);
    i = 0
    while (z.absSquared() < 4.0 and i < maxIterations) {
        z = z.square();
        z = z.add(c);
        ++i;
    }

    return i >= maxIterations;
}

manager = MandelbrotManager(-step / 2 * (size - 1) + xCenter, -step / 2 * (size - 1) + yCenter, 0, 0)
# run for @a print(manager.currentX, ", ", manager.currentY, ", ", manager.hasLoaded)
fun onTick() -> Null {
    count = 0;
    run for @e[tag=mandelbrot_master] ++count;
    if (count > 1) {
        run for @a print("Second mandelbrot cursor detected. Aborting...");
        execute("kill @e[tag=mandelbrot]");
    } 
    if (count == 1) {
        manager.tick();
    } else {
        manager = MandelbrotManager(-step / 2 * (size - 1) + xCenter, -step / 2 * (size - 1) + yCenter, 0, 0);
    }
}
