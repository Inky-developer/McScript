struct Complex {
    real: Fixed;
    imag: Fixed;

    fun add(self: Complex, other: Complex) -> Complex {
        return Complex(self.real + other.real, self.imag + other.imag);
    }

    fun square(self: Complex) -> Complex {
        return Complex(self.real * self.real - self.imag * self.imag, 2.0 * self.real * self.imag);
    }

    fun absSquared(self: Complex) -> Fixed {
        return self.real * self.real + self.imag * self.imag;
    }
}

fun mandelbrot(x: Fixed, y: Fixed) -> Boolean {
    c = Complex(x, y);
    z = Complex(0.0, 0.0);
    i = 0
    while (z.absSquared() < 4.0 and i < 15) {
        z = z.square();
        z = z.add(c);
        ++i;
    }

    return i >= 15;
}

run for @a at @s {
    for (z in range(50)) {
        for (x in range(50)) {
            if (mandelbrot(1.0 * x, 1.0 * z)) {
                setBlock(blocks.stone, x, -1, z);
            } else {
                setBlock(blocks.white_concrete, x, -1, z);
            }
        }
    }
}