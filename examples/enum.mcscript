# Enums behave much like in other programming languages
# This is a basic enum:
enum example {
	FAIL;
	SUCCESS;
}
# This enum is auto-indexed, so example.FAIL has a value of 0 and example.SUCCESS has a value of 1:
run for @a {
	print("Fail: {}", example.FAIL)
	print("SUCCESS: {}", example.SUCCESS)
}

# Enums can have custom values, too:
enum customValues {
	normal;
	number = 10;
	another_number = 1000000000000;
}
run for @a {
	print("{}", customValues.normal)
	print("{}", customValues.number)
	print("{}", customValues.another_number)
}
# Note that every value for an enum must be unique.
# If the value of customValues.number would be set to 1 instead of 10,
# the compiler would fail.

# A enum can return the name of a value
# Printing is also supported which can be helpful for debugging
run for @a {
	print("{}", customValues)
}

# There are also built-in enums:
# currently only blocks
# built-in enums can have other values than numbers
run for @a {
	print("sponge: {}", blocks.sponge)
}
