start: statement*

statement: declaration statement_separator?
         | const_declaration statement_separator?
         | term_ip statement_separator?
         | expression statement_separator?
         | function_definition statement_separator?
         | "return " expression statement_separator? -> return_
         | control_if statement_separator?
         | control_while statement_separator?
         | control_enum statement_separator?
         | "at " ( SELECTOR  ) block statement_separator? -> at
         | "for " ( SELECTOR ) block statement_separator? -> as_

statement_separator: /\n|;/

function_definition: "fun " IDENTIFIER parameter_list "->" DATATYPE block
block: "{" statement* "}"
     | statement
function_block: "{" ( function_value "," )* function_value? "->" statement+ "}"
function_parameter: IDENTIFIER ":" DATATYPE
parameter_list: "(" (function_parameter "," )* function_parameter? ")"
function_value: expression
function_call: IDENTIFIER "(" (function_value "," )* function_value? ")" function_block?

declaration: IDENTIFIER "=" expression
const_declaration: "const " declaration
term_ip: IDENTIFIER (PLUS | MINUS | TIMES | DIVIDE | MODULO) "=" expression

expression: comparison
          | term

// terms like (6 + 8) * -9
term: sum
?sum: product ((PLUS | MINUS) product)*
?product: value ((TIMES | DIVIDE | MODULO) value)*
value: NUMBER
     | DECIMAL
     | STRING
     | MINUS value -> signed_value
     | "(" expression ")"
     | IDENTIFIER -> variable
     | function_call
     | IDENTIFIER ("." IDENTIFIER)+ -> property

comparison: term (VERIFY_EQUAL | VERIFY_NOT_EQUAL | VERIFY_GREATER | VERIFY_GREATER_OR_EQUAL | VERIFY_LESS | VERIFY_LESS_OR_EQUAL) term

// control flow
control_if: "if " expression block ("else " block)?
control_while: "while " expression block
control_enum: "enum " IDENTIFIER enum_block
enum_block: "{" ( enum_property ";" )* enum_property ";"? "}" // ToDo integrate with better assignments
enum_property: IDENTIFIER | (IDENTIFIER "=" NUMBER)

NUMBER: /[0-9]+/
DECIMAL: /[0-9]*\.[0-9]+/
STRING: /".*?"/ | /'.*?'/
SELECTOR: /@[parse](\[\w+=!?.+\])?/
PLUS: "+"
MINUS: "-"
TIMES: "*"
DIVIDE: "/"
MODULO: "%"

VERIFY_EQUAL: "=="
VERIFY_NOT_EQUAL: "!="
VERIFY_GREATER: ">"
VERIFY_GREATER_OR_EQUAL: ">="
VERIFY_LESS: "<"
VERIFY_LESS_OR_EQUAL: "<="

DATATYPE: "Number"
        | "Fixed"
        | "Boolean"
        | "String"
        | "Function"
        | "Enum"
        | "Selector"
        | "Null"

IDENTIFIER.0: /[a-z_][a-z_0-9]*/i
COMMENT: "#" /[^\n]/*
%ignore " " | "\n" | "\t"
%ignore COMMENT