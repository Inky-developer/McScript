start: statement*

statement: declaration statement_separator?
         | const_declaration statement_separator?
         | term_ip statement_separator?
         | expression statement_separator?
         | function_definition statement_separator?
         | "return " expression statement_separator? -> return_
         | control_if statement_separator?
         | control_while statement_separator?
         | control_enum statement_separator?
         | control_struct statement_separator?
         | context_manipulator statement_separator?

statement_separator: /\n|;/

function_definition: "fun " IDENTIFIER parameter_list "->" IDENTIFIER block
block: "{" statement* "}"
     | statement
function_block: "{" ( function_value "," )* function_value? "->" statement+ "}"
function_parameter: IDENTIFIER ":" IDENTIFIER
parameter_list: "(" (function_parameter "," )* function_parameter? ")"
function_value: expression
function_call: accessor "(" (function_value "," )* function_value? ")"

variable_declaration: [/\bconst\b/] IDENTIFIER ":" IDENTIFIER
declaration: accessor "=" expression //Todo
const_declaration: "const " declaration
term_ip: IDENTIFIER ("." IDENTIFIER)* (PLUS | MINUS | TIMES | DIVIDE | MODULO) "=" expression //ToDo

expression: comparison
          | term
          | NOT expression -> boolean_not
          | expression (OR expression)+ -> boolean_or
          | expression (AND expression)+ -> boolean_and

// terms like (6 + 8) * -9
term: sum
?sum: product ((PLUS | MINUS) product)*
?product: value ((TIMES | DIVIDE | MODULO) value)*
value: NUMBER
     | DECIMAL
     | STRING
     | unary_operation
     | "(" expression ")"
     | accessor
     | function_call

accessor: IDENTIFIER ("." IDENTIFIER)*

unary_operation: MINUS value
               | INCR_ONE value
               | DECR_ONE value

comparison: term (VERIFY_EQUAL | VERIFY_NOT_EQUAL | VERIFY_GREATER | VERIFY_GREATER_OR_EQUAL | VERIFY_LESS | VERIFY_LESS_OR_EQUAL) term

// control flow
control_if: "if " expression block ("else " block)?
control_while: "while " expression block

control_enum: "enum " IDENTIFIER enum_block
enum_block: "{" ( enum_property ";" )* enum_property ";"? "}" // ToDo integrate with better assignments
enum_property: IDENTIFIER | (IDENTIFIER "=" NUMBER)

control_struct: _KEYWORD_STRUCT IDENTIFIER struct_block
struct_block: "{" (( variable_declaration | function_definition )statement_separator?)* "}"

context_manipulator: "run" ((/\bat\b/ | /\bfor\b/) SELECTOR)+ block


NUMBER: /[0-9]+/
DECIMAL: /[0-9]*\.[0-9]+/
STRING: /".*?"/ | /'.*?'/
SELECTOR: /@[parse](\[\w+=!?.+\])?/
PLUS: "+"
MINUS: "-"
TIMES: "*"
DIVIDE: "/"
MODULO: "%"
AND: /\band\b/
OR: /\bor\b/
NOT: /\bnot\b/

INCR_ONE: "++"
DECR_ONE: "--"

VERIFY_EQUAL: "=="
VERIFY_NOT_EQUAL: "!="
VERIFY_GREATER: ">"
VERIFY_GREATER_OR_EQUAL: ">="
VERIFY_LESS: "<"
VERIFY_LESS_OR_EQUAL: "<="

IDENTIFIER.0: /[a-z_][a-z_0-9]*/i

_KEYWORD_STRUCT: /\bstruct\b/

COMMENT: "#" /[^\n]/*
%ignore " " | "\n" | "\t"
%ignore COMMENT